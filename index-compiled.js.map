{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA;;;;AACA;;AACA;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAM,SAAS;AACX,UAAM,EAAN;AACA,4BAFW;AAGX,iBAAa,CACT;AACI,cAAM,GAAN;AACA,kCAFJ;KADS,CAAb;CAHE;;AAWN,IAAM,MAAM,wBAAN;;AAEN,IAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,QAAf,CAAR;;AAEA,IAAI,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;;AAEA,IAAI,GAAJ,CAAQ,GAAR,EAAa,UAAC,GAAD,EAAM,GAAN,EAAc;;AAEvB,4BAAM,EAAE,cAAF,EAAU,UAAU,IAAI,GAAJ,EAA1B,EAAqC,UAAC,GAAD,EAAM,gBAAN,EAAwB,KAAxB,EAAkC;AACnE,YAAI,GAAJ,EAAS;;AAEL,gBAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,IAAI,OAAJ,CAArB,CAFK;SAAT,MAGO,IAAI,gBAAJ,EAAsB;;AAEzB,gBAAI,QAAJ,CAAa,GAAb,EAAkB,iBAAiB,QAAjB,GAA4B,iBAAiB,MAAjB,CAA9C,CAFyB;SAAtB,MAGA,IAAI,KAAJ,EAAW;;;AAGd,gBAAM,SAAS,4BAAe,2DAAoB,KAApB,CAAf,CAAT;;;AAHQ,eAMd,CAAI,MAAJ,CAAW,OAAX,EAAoB,EAAE,cAAF,EAApB,EANc;SAAX,MAQA;;;AAGH,gBAAI,UAAJ,CAAe,GAAf,EAHG;SARA;KAP0B,CAArC,CAFuB;CAAd,CAAb;;AA0BA,IAAM,SAAS,eAAK,YAAL,CAAkB,GAAlB,CAAT;;AAEN,OAAO,MAAP,CAAc,IAAd;AACA,OAAO,EAAP,CAAU,WAAV,EAAuB,YAAM;AACzB,YAAQ,GAAR,CAAY,mBAAZ,EADyB;CAAN,CAAvB","file":"index-compiled.js","sourcesContent":["import React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { match, RoutingContext } from 'react-router';\n\nimport AppComponent from './components/app';\nimport IndexComponent from './components/index';\n\nimport express from 'express';\nimport http from 'http';\n\nconst routes = {\n    path: '',\n    component: AppComponent,\n    childRoutes: [\n        {\n            path: '/',\n            component: IndexComponent\n        }\n    ]\n};\n\nconst app = express();\n\napp.use(express.static('public'));\n\napp.set('view engine', 'ejs');\n\napp.get('*', (req, res) => {\n    // routes is our object of React routes defined above\n    match({ routes, location: req.url }, (err, redirectLocation, props) => {\n        if (err) {\n            // something went badly wrong, so 500 with a message\n            res.status(500).send(err.message);\n        } else if (redirectLocation) {\n            // we matched a ReactRouter redirect, so redirect from the server\n            res.redirect(302, redirectLocation.pathname + redirectLocation.search);\n        } else if (props) {\n            // if we got props, that means we found a valid component to render\n            // for the given route\n            const markup = renderToString(<RoutingContext {...props} />);\n\n            // render `index.ejs`, but pass in the markup we want it to display\n            res.render('index', { markup })\n\n        } else {\n            // no route match, so 404. In a real app you might render a custom\n            // 404 view here\n            res.sendStatus(404);\n        }\n    });\n});\n\n\nconst server = http.createServer(app);\n\nserver.listen(3003);\nserver.on('listening', () => {\n    console.log('Listening on 3003');\n});"]}